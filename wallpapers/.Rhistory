library(tidyverse)
library(tidycensus)
library(sf)
library(fasterize)
library(raster)
library(reshape)
multnomah_pop <- get_decennial(
geography = 'block',
variables = 'H010001',
geometry = T,
state = 'OR',
county = 'Multnomah',
year = 2010
)
washington_pop <- get_decennial(
geography = 'block',
variables = 'H010001',
geometry = T,
state = 'OR',
county = 'Washington',
year = 2010
)
clackamas_pop <- get_decennial(
geography = 'block',
variables = 'H010001',
geometry = T,
state = 'OR',
county = 'Clackamas',
year = 2010
)
pdx_metro <- rbind(multnomah_pop, clackamas_pop) %>%
rbind(washington_pop)
# population density
pdx_metro$density <- pdx_metro$value / st_area(pdx_metro)
# reproject sf object
pdx_metro <- st_transform(pdx_metro, crs = 6855)
# create empty raster and rasterize sf polygons
r <- raster(ncol = 100, nrow = 100)
extent(r) <- extent(pdx_metro)
pdx_metro
popDensRaster <- fasterize(st_collection_extract(pdx_metro, "POLYGON"), r, field = 'density', fun = 'last')
coords <- as.data.frame(coordinates(popDensRaster))
values <- data.frame(pop = values(popDensRaster),
x = coords$x,
y = coords$y)
# standardize values for easier visualization
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
values$pop[is.na(values$pop)] <- 0
values$pop_st <- range01(values$pop)*0.06 # this scalar will affect how peaky the peaks are. Higher value = peakier
# values$pop_st[values$pop > 0.0828908] <- 0 # make maximum 0...a weird block NW of fairmount park
values$x_st <- range01(values$x)
values$y_st <- range01(values$y)
xquiet <- scale_x_continuous("", breaks=NULL)
yquiet <- scale_y_continuous("", breaks=NULL)
quiet <- list(xquiet, yquiet)
values$ord <- values$y
values_s <- values[order(-values$ord),]
# Create an empty plot called p
p <- ggplot()
backgroundColor <- 'cadetblue4' # other colors I like: blue #1D3A7D, gray #B2B6BF, coral #F88379
lineColor <- 'white'
# This loops through each line of latitude and produced a filled polygon that will mask out the
# lines beneath and then plots the paths on top.The p object becomes a big ggplot2 plot.
for (i in unique(values_s$ord)){
p <- p + geom_polygon(data = values_s[values_s$ord == i,], aes(x_st, pop_st + y_st, group = y_st),
size = 0.2, fill = backgroundColor, col = backgroundColor) +
geom_path(data = values_s[values_s$ord == i,],aes(x_st, pop_st + y_st, group = y_st), size = 0.2,
lineend = 'round', col = lineColor)
}
# Display plot and save as pdf
pdf(file = "~/Desktop/wallpapers/populationLines_cadetblue4.pdf", width=10, height=10)
p + theme(panel.background = element_rect(fill = backgroundColor,colour = backgroundColor)) + quiet
dev.off()
p <- ggplot()
backgroundColor <- 'azure4' # other colors I like: blue #1D3A7D, gray #B2B6BF, coral #F88379
lineColor <- 'white'
# This loops through each line of latitude and produced a filled polygon that will mask out the
# lines beneath and then plots the paths on top.The p object becomes a big ggplot2 plot.
for (i in unique(values_s$ord)){
p <- p + geom_polygon(data = values_s[values_s$ord == i,], aes(x_st, pop_st + y_st, group = y_st),
size = 0.2, fill = backgroundColor, col = backgroundColor) +
geom_path(data = values_s[values_s$ord == i,],aes(x_st, pop_st + y_st, group = y_st), size = 0.2,
lineend = 'round', col = lineColor)
}
# Display plot and save as pdf
pdf(file = "~/Desktop/wallpapers/populationLines_azure4.pdf", width=10, height=10)
p + theme(panel.background = element_rect(fill = backgroundColor,colour = backgroundColor)) + quiet
dev.off()
p <- ggplot()
backgroundColor <- 'turquoise' # other colors I like: blue #1D3A7D, gray #B2B6BF, coral #F88379
lineColor <- 'white'
# This loops through each line of latitude and produced a filled polygon that will mask out the
# lines beneath and then plots the paths on top.The p object becomes a big ggplot2 plot.
for (i in unique(values_s$ord)){
p <- p + geom_polygon(data = values_s[values_s$ord == i,], aes(x_st, pop_st + y_st, group = y_st),
size = 0.2, fill = backgroundColor, col = backgroundColor) +
geom_path(data = values_s[values_s$ord == i,],aes(x_st, pop_st + y_st, group = y_st), size = 0.2,
lineend = 'round', col = lineColor)
}
# Display plot and save as pdf
pdf(file = "~/Desktop/wallpapers/populationLines_turquoise.pdf", width=10, height=10)
p + theme(panel.background = element_rect(fill = backgroundColor,colour = backgroundColor)) + quiet
dev.off()
p <- ggplot()
backgroundColor <- 'turquoise' # other colors I like: blue #1D3A7D, gray #B2B6BF, coral #F88379
lineColor <- 'white'
# This loops through each line of latitude and produced a filled polygon that will mask out the
# lines beneath and then plots the paths on top.The p object becomes a big ggplot2 plot.
for (i in unique(values_s$ord)){
p <- p + geom_polygon(data = values_s[values_s$ord == i,], aes(x_st, pop_st + y_st, group = y_st),
size = 0.5, fill = backgroundColor, col = backgroundColor) +
geom_path(data = values_s[values_s$ord == i,],aes(x_st, pop_st + y_st, group = y_st), size = 0.5,
lineend = 'round', col = lineColor)
}
# Display plot and save as pdf
pdf(file = "~/Desktop/wallpapers/populationLines_turquoise.pdf", width=10, height=10)
p + theme(panel.background = element_rect(fill = backgroundColor,colour = backgroundColor)) + quiet
dev.off()
6933*12
library(tidyverse)
library(readxl)
path_to_ofm_housing_units <- "~/Desktop/rent_control/ofm_april1_housing.xlsx"
path_to_ofm_pop <- "~/Desktop/rent_control/ofm_april1_postcensal_estimates_pop_1960-present.xlsx"
ofm <- read_excel(
path = path_to_ofm_housing_units,
sheet = "Housing Units",
col_types = "text",
skip = 3
)
pop <- read_excel(
path = path_to_ofm_pop,
sheet = "Population",
col_types = "text",
skip = 3
)
ofm <- ofm %>%
filter(County != ".")
pop <- pop %>%
filter(County != ".")
total_housing_units <- ofm %>%
select(County, ends_with("Total Housing Units")) %>%
rename_at(vars(-County), ~str_sub(., 1, 4)) %>%
gather(year, total_housing_units, `2010`:`2019`) %>%
mutate_at(vars(-County), as.numeric) %>%
group_by(County, year) %>%
summarise_all(sum) %>%
ungroup()
two_or_more_unit_housing_units <- ofm %>%
select(County, ends_with("Two or More Unit Housing Units")) %>%
rename_at(vars(-County), ~str_sub(., 1, 4)) %>%
gather(year, two_or_more_unit_housing_units, `2010`:`2019`) %>%
mutate_at(vars(-County), as.numeric) %>%
group_by(County, year) %>%
summarise_all(sum) %>%
ungroup()
housing_units <- inner_join(total_housing_units, two_or_more_unit_housing_units)
housing_units <- housing_units %>%
group_by(County) %>%
mutate(
delta_total_housing_units = total_housing_units - dplyr::lag(total_housing_units, 1),
delta_two_or_more_unit_housing_units = two_or_more_unit_housing_units - dplyr::lag(two_or_more_unit_housing_units, 1)
) %>%
mutate(pct_delta_hu = delta_total_housing_units / dplyr::lag(total_housing_units, 1),
pct_delta_tomuhu = delta_two_or_more_unit_housing_units / dplyr::lag(two_or_more_unit_housing_units, 1)) %>%
ungroup()
pop <- pop %>%
select(County, ends_with("Estimate of Total Population")) %>%
rename_at(vars(-County), ~str_sub(., 1, 4)) %>%
gather(year, total_pop, `1961`:`2019`) %>%
filter(total_pop != ".") %>%
mutate_at(vars(-County), as.numeric) %>%
group_by(County, year) %>%
summarise_all(sum) %>%
ungroup()
pop <- pop %>%
group_by(County) %>%
mutate(delta_pop = total_pop - dplyr::lag(total_pop, 1)) %>%
mutate(pct_delta_pop = delta_pop / dplyr::lag(total_pop, 1)) %>%
ungroup()
ofm_data_clean <- inner_join(housing_units, pop)
pop_on_housing_model <- lm(
pct_delta_hu ~ pct_delta_pop + County,
data = mutate_at(
.tbl = ofm_data_clean,
.vars = vars(pct_delta_hu, pct_delta_pop),
.funs = ~ . * 100
)
)
broom::glance(pop_on_housing_model)
broom::tidy(pop_on_housing_model)
housing_production_plot <- ofm_data_clean %>%
filter(!is.na(pct_delta_hu)) %>%
ggplot() +
geom_line(aes(x = year, y = pct_delta_hu, group = County, color = County)) +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = 2011:2019) +
labs(x = "",
y = "Change in Total Housing Units",
title = "State of Washington Housing Production"
) +
guides(color = FALSE) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plot_relationship_pop_hu_deltas <- ofm_data_clean %>%
filter(!is.na(pct_delta_hu) & !is.na(pct_delta_pop)) %>%
ggplot() +
geom_point(aes(x = pct_delta_pop, y = pct_delta_hu, color = County)) +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(labels = scales::percent) +
labs(x = "Change in Total Population",
y = "Change in Total Housing Units",
title = "State of Washington"
) +
guides(color = FALSE) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
housing_production_plot
